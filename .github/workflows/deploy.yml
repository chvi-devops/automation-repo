name: Create and Configure GitHub Repo

on:
  push:
    branches:
      - main
  pull_request:

env:
  org_name: chvi-devops
  team_name: TeamA
  template_repo_name: template-repo
  workspace_repo_name: workspace-repo
  GH_TOKEN: ${{ secrets.GH_PAT }}

jobs:
  ingest_input:
    name: "Ingest Inputs"
    runs-on: ubuntu-latest
    outputs:
      new_repo_name: ${{ steps.ingest_inputs.outputs.new_repo_name }}
      new_repo_description: ${{ steps.ingest_inputs.outputs.new_repo_description }}
      new_repo_tfvars_file: ${{ steps.ingest_inputs.outputs.new_repo_tfvars_file }}
      network_spoke_module: ${{ steps.ingest_inputs.outputs.network_spoke_module }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Ingest Inputs
        id: ingest_inputs
        run: |
          while IFS='' read -r line || [[ -n "$line" ]]; do
          name="$(echo "$line" | cut -d ':' -f 1 | sed 's/ *$//g')"
          value="$(echo "$line" | cut -d ':' -f 2- | sed 's/^ *//g')"
          echo "$name=$value" >> "$GITHUB_OUTPUT"
          done < parameters.yml
          
  create_repo:
    needs: ingest_input
    name: "Deploy New Repositories"
    runs-on: ubuntu-latest
    env:
      new_repo_name: ${{ needs.ingest_input.outputs.new_repo_name }}
      new_repo_description: ${{ needs.ingest_input.outputs.new_repo_description }}
    steps:
    - name: Generate a token
      uses: actions/create-github-app-token@v1
      id: generate_token
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}

    - name: Check if Repository Already Exists and Stop Workflow If Repository Exist
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        if gh api repos/$org_name/$new_repo_name --silent 2>/dev/null; then
          echo "Repository $org_name/$new_repo_name exists."
          exit 1
        else
          echo "Repository $org_name/$new_repo_name does not exist."
        fi
      shell: bash

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create Repository
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        gh repo create $org_name/$new_repo_name --public --description "$new_repo_description" \
          --include-all-branches --template=$org_name/$template_repo_name

  configure-new-repo:
    needs: [ ingest_input, create_repo ]
    name: "Configure New Repository"
    runs-on: ubuntu-latest
    env:
      new_repo_name: ${{ needs.ingest_input.outputs.new_repo_name }}
      new_repo_tfvars_file: ${{ needs.ingest_input.outputs.new_repo_tfvars_file }}
      network_spoke_module: ${{ needs.ingest_input.outputs.network_spoke_module }}
    steps: 
    - name: Generate a token
      uses: actions/create-github-app-token@v1
      id: generate_token
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
      
    - name: Add Team as a Reviewer Team
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        team_slug_name=$(echo "$team_name" | tr '[:upper:]' '[:lower:]')
        gh api --method PUT \
          /orgs/$org_name/teams/$team_slug_name/repos/$org_name/$new_repo_name -f permission='triage' 
    
    - name: Configure Branch Protection
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        # Enable branch protection for Main branch
        curl -X PUT -H "Authorization: token $GH_TOKEN" \
          "https://api.github.com/repos/$org_name/$new_repo_name/branches/main/protection" -d '{
            "required_status_checks": null,
            "enforce_admins": null,
            "required_pull_request_reviews": {
              "dismiss_stale_reviews": false,
              "require_code_owner_reviews": false,
              "required_approving_review_count": 1
            },
            "restrictions": null,
            "required_linear_history": false,
            "allow_force_pushes": false,
            "allow_deletions": false
          }'
        
        # Enable branch protection for Development branch
        curl -X PUT -H "Authorization: token $GH_TOKEN" \
          "https://api.github.com/repos/$org_name/$new_repo_name/branches/development/protection" -d '{
            "required_status_checks": null,
            "enforce_admins": null,
            "required_pull_request_reviews": {
              "dismiss_stale_reviews": false,
              "require_code_owner_reviews": false,
              "required_approving_review_count": 1
            },
            "restrictions": null,
            "required_linear_history": false,
            "allow_force_pushes": false,
            "allow_deletions": false
          }'
      shell: bash

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Clone New repo
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: 
        gh repo clone $org_name/$new_repo_name
    
    - name: Manupilate main.tf file
      id: main_tf
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
          cd ${{ github.workspace }}/$new_repo_name
          git checkout development

          response=$(gh api /repos/$org_name/$new_repo_name/contents/main.tf?ref=development)
          echo "sha=$(echo "$response" | jq -r '.sha')" >> "$GITHUB_OUTPUT"

          if [[ $network_spoke_module == 'true' ]]; then
            module_content=$(cat "${{ github.workspace }}/modules/network-spoke.tf")
            echo "$module_content" >> main.tf
          fi

          echo "encoded_content=$(cat main.tf | base64 | tr -d '[:space:]')" >> "$GITHUB_OUTPUT"

    - name: Configure repo
      id: config
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        cd ${{ github.workspace }}/$new_repo_name
        git checkout development

        curl -L \
          -X PUT \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/$org_name/$new_repo_name/contents/main.tf -d '{
            "message":"Main file changed",
            "committer":{"name":"Demo user","email":"DemoUser@github.com"},
            "branch":"development",
            "sha": "${{ steps.get_sha.outputs.sha }}",
            "content":"${{ steps.get_sha.outputs.encode }}"
          }'

        tfvars_count=$(yq eval '.new_repo_tfvars_file | length' ${{ github.workspace }}/parameters.yml)

        if [[ $tfvars_count > 0 ]]; then
          count=$tfvars_count
          while [[ $count -gt 0 ]]; do 
            count=$((count-1))
            file_name=$(yq eval '.new_repo_tfvars_file['$count']' ${{ github.workspace }}/parameters.yml)
            cp ${{ github.workspace }}/tfvars/$file_name.tfvars ${{ github.workspace }}/$new_repo_name
            echo $file_name
            encoded_content=$(cat $file_name.tfvars | base64 | tr -d '[:space:]')
            echo $encoded_content
            curl -L \
              -X PUT \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/$org_name/$new_repo_name/contents/$file_name.tfvars -d '{
                "message":"tfvars file added",
                "committer":{"name":"Demo user","email":"DemoUser@github.com"},
                "branch":"development",
                "content":"$encoded_content"
              }'
          done
        fi